{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "..",
  "sources": [
    "src/index.coffee"
  ],
  "names": [],
  "mappings": "AAAA;AAAA,MAAA,IAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,EAAA,WAAA,EAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,WAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,EAAA;;EAAA,GAAA,GAAM,IAAI,KAAK,CAAC;;EAEhB,UAAA,GACE;IAAA,IAAA,EACE;MAAA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAzB,CAAH;MACA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CADH;MAEA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAFH;MAGA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;IAHH,CADF;IAKA,GAAA,EACE;MAAA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAzB,CAAH;MACA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAzB,CADH;MAEA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAFH;MAGA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAHH;MAIA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAJH;MAKA,CAAA,EAAG,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;IALH;EANF;;EAaF,WAAA,GAAc;;EACd,SAAA,GACE;IAAA,QAAA,EACE;MAAA,KAAA,EAAU,CAAA,QAAA,CAAA,CAAA;AACR,YAAA;QAAA,KAAA,GAAQ,IAAI,KAAK,CAAC,WAAV,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;QAER,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QAEjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QACjC,KAAK,CAAC,aAAc,CAAA,CAAA,CAAG,CAAA,CAAA,CAAG,CAAA,CAAA,CAAE,CAAC,CAA7B,GAAiC;QAEjC,KAAK,CAAC,aAAN,GAAsB;eACtB;MAlBQ,CAAA,CAAH,CAAA,CAAP;MAmBA,OAAA,EAAS,IAAI,KAAK,CAAC,cAAV,CAAyB,GAAzB,EAA8B,CAA9B;IAnBT,CADF;IAqBA,QAAA,EACE;MAAA,SAAA,EAAW,IAAI,KAAK,CAAC,iBAAV,CAA4B;QAAA,KAAA,EAAO;MAAP,CAA5B,CAAX;MACA,SAAA,EAAW,IAAI,KAAK,CAAC,iBAAV,CAA4B;QAAA,KAAA,EAAO;MAAP,CAA5B,CADX;MAEA,QAAA,EAAU,IAAI,KAAK,CAAC,iBAAV,CAA4B;QAAA,KAAA,EAAO;MAAP,CAA5B,CAFV;MAGA,OAAA,EAAS,IAAI,KAAK,CAAC,iBAAV,CACP;QAAA,KAAA,EAAO,QAAP;QACA,WAAA,EAAa,IADb;QAEA,OAAA,EAAS;MAFT,CADO;IAHT;EAtBF;;EA8BF,OAAA,GACE;IAAA,QAAA,EAAU,IAAI,KAAK,CAAC,UAApB;IACA,QAAA,EAAU,IAAI,KAAK,CAAC;EADpB;;EAGF,IAAA,GAAO,QAAA,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,CAAA;IACL,EAAE;WACF,OAAQ,CAAA,IAAA,CAAK,CAAC,IAAd,CAAmB,gBAAA,GAAmB,IAAtC,EAA4C,QAAA,CAAC,GAAD,CAAA;AAC1C,UAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;MAAA,IAAA,GAAO,IACL,CAAC,KADI,CACE,GADF,CAEL,CAAC,GAFI,CAAA,CAGL,CAAC,KAHI,CAGE,GAHF,CAIL,CAAC,KAJI,CAAA;MAKP,IAAG,IAAA,KAAQ,UAAX;QACE,GAAA,GAAM,IAAI,KAAK,CAAC,iBAAV,CAA4B;UAAA,GAAA,EAAK;QAAL,CAA5B,EADR;;AAEA;MAAA,KAAA,qCAAA;QAAI,CAAC,SAAD,EAAY,IAAZ;QACF,GAAI,CAAA,SAAA,CAAJ,CAAe,GAAG,IAAlB;MADF;MAEA,SAAU,CAAA,IAAA,CAAM,CAAA,IAAA,CAAhB,GAAwB;aACxB,MAAA,CAAA;IAX0C,CAA5C;EAFK;;EAeP,KAAA,GAAQ;;EACR,IAAA,CAAK,UAAL,EAAiB,gBAAjB,EAAmC,CACjC,CAAC,WAAD,EAAc,CAAC,CAAD,EAAI,CAAC,CAAL,EAAQ,CAAR,CAAd,CADiC,EAEjC,CAAC,OAAD,EAAU,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAV,CAFiC,CAAnC;;EAIA,IAAA,CAAK,UAAL,EAAiB,oBAAjB;;EACA,IAAA,CAAK,UAAL,EAAiB,mBAAjB;;EACA,IAAA,CAAK,UAAL,EAAiB,oBAAjB;;EACA,IAAA,CAAK,UAAL,EAAiB,WAAjB;;EACA,IAAA,CAAK,UAAL,EAAiB,YAAjB;;EACA,IAAA,CAAK,UAAL,EAAiB,iBAAjB;;EAEA,MAAA,GAAS,QAAA,CAAA,CAAA;AACP,QAAA;IAAA,IAAU,EAAE,WAAZ;AAAA,aAAA;;IACA,MAAA,GAAS,KAAA,CAAK,4EAAL;WAST,qBAAA,CAAsB,QAAA,CAAA,CAAA;aAAG,OAAA,CAAQ,IAAA,CAAK,MAAL,CAAR;IAAH,CAAtB;EAXO;;EAaH,SAAN,MAAA,OAAA;IACE,WAAa,GAAA,IAAA,CAAA;MAAC,IAAC,CAAA;MAAG,IAAC,CAAA;MACjB,IAAC,CAAA,IAAD,GAAQ;MACR,IAAC,CAAA,QAAD,GAAY,SAAS,CAAC,QAAQ,CAAC;MAC/B,IAAC,CAAA,QAAD,GAAY,SAAS,CAAC,QAAQ,CAAC;MAC/B,IAAC,CAAA,IAAD,GAAQ,IAAI,KAAK,CAAC,IAAV,CAAe,IAAC,CAAA,QAAhB,EAA0B,IAAC,CAAA,QAA3B;MACR,IAAC,CAAA,UAAD,GAAc,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,GAArB,EAA0B,CAA1B,CACZ,CAAC,SADW,CAAA;IALH;;IAQb,MAAQ,CAAC,KAAD,CAAA;MACN,IAAC,CAAA,IAAI,CAAC,iBAAN,CAAwB,IAAC,CAAA,UAAzB,EAAqC,IAArC;MACA,IAAG,KAAK,CAAC,KAAK,CAAC,IAAZ,KAAsB,KAAtB,IACD,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAnB,KAAwB,IAAC,CAAA,CADxB,IAED,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAnB,KAAwB,IAAC,CAAA,CAF3B;QAGI,KAAK,CAAC,gBAAgB,CAAC,IAAvB,CAA4B,KAA5B,EAAmC,KAAnC,EAHJ;;IAFM;;EATV;;EAiBM,OAAN,MAAA,KAAA;IACE,WAAa,GAAA,IAAA,CAAA;MAAC,IAAC,CAAA;MAAG,IAAC,CAAA;MACjB,IAAC,CAAA,IAAD,GAAQ;MACR,IAAC,CAAA,QAAD,GAAY,SAAS,CAAC,QAAQ,CAAC;MAC/B,IAAC,CAAA,QAAD,GAAY,CACV,SAAS,CAAC,QAAQ,CAAC,SADT,EAEV,SAAS,CAAC,QAAQ,CAAC,SAFT,EAGV,SAAS,CAAC,QAAQ,CAAC,QAHT,EAIV,SAAS,CAAC,QAAQ,CAAC,SAJT,EAKV,SAAS,CAAC,QAAQ,CAAC,SALT,EAMV,SAAS,CAAC,QAAQ,CAAC,QANT;MAQZ,IAAC,CAAA,IAAD,GAAQ,IAAI,KAAK,CAAC,IAAV,CAAe,IAAC,CAAA,QAAhB,EAA0B,IAAC,CAAA,QAA3B;MACR,IAAC,CAAA,KAAD,GAAS;MACT,IAAC,CAAA,QAAD,GAAY;MACZ,IAAC,CAAA,IAAD,GAAQ,IAAI,KAAK,CAAC;MAClB,IAAC,CAAA,EAAD,GAAM,IAAI,KAAK,CAAC;MAChB,IAAC,CAAA,QAAD,GAAY;MACZ,IAAC,CAAA,UAAD,GAAc,IAAI,KAAK,CAAC;IAjBb;;IAmBb,IAAM,CAAA,CAAA;MACJ,IAAC,CAAA,SAAD,GAAa,CAAC,KAAD,CAAA,GAAA;AACX,gBAAO,KAAK,CAAC,GAAG,CAAC,WAAV,CAAA,CAAP;AAAA,eACO,GADP;YACgB,IAAC,CAAA,QAAD,GAAY;AAArB;AADP,eAEO,GAFP;YAEgB,IAAC,CAAA,QAAD,GAAY;AAArB;AAFP,eAGO,GAHP;YAGgB,IAAC,CAAA,QAAD,GAAY;AAArB;AAHP,eAIO,GAJP;YAIgB,IAAC,CAAA,QAAD,GAAY;AAArB;AAJP,eAKO,GALP;YAKgB,IAAC,CAAA,QAAD,GAAY;AAArB;AALP,eAMO,GANP;YAMgB,IAAC,CAAA,QAAD,GAAY;AAArB;AANP,eAOO,GAPP;YAOgB,IAAC,CAAA,QAAD,GAAY;AAP5B;MADW;aAUb,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,EAAqC,IAAC,CAAA,SAAtC;IAXI;;IAaN,MAAQ,CAAA,CAAA;aACN,QAAQ,CAAC,mBAAT,CAA6B,SAA7B,EAAwC,IAAC,CAAA,SAAzC;IADM;;IAGR,MAAQ,CAAC,KAAD,CAAA;AACN,UAAA;8DAAA,YAAc;IADR;;IAGR,IAAM,CAAC,KAAD,CAAA;AACJ,UAAA;MAAA,IAAG,IAAC,CAAA,QAAJ;QACE,IAAA,GAAO,UAAW,CAAA,KAAK,CAAC,KAAK,CAAC,IAAZ,CAAkB,CAAA,IAAC,CAAA,QAAD;QACpC,IAAC,CAAA,QAAD,GAAY;QACZ,IAAA,CAAA,CAAc,IAAA,IAAS,IAAC,CAAA,OAAD,CAAS,KAAT,EAAgB,IAAhB,CAAvB,CAAA;AAAA,iBAAA;;QACA,IAAC,CAAA,IAAI,CAAC,GAAN,CAAU,IAAC,CAAA,CAAX,EAAc,CAAC,IAAC,CAAA,CAAhB,EAAmB,CAAnB;QACA,IAAC,CAAA,CAAD,IAAM,IAAI,CAAC;QACX,IAAC,CAAA,CAAD,IAAM,IAAI,CAAC;QACX,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,IAAC,CAAA,CAAT,EAAY,CAAC,IAAC,CAAA,CAAd,EAAiB,CAAjB;QACA,IAAC,CAAA,QAAD,GAAY;QACZ,IAAC,CAAA,UACC,CAAC,GADH,CACO,IAAI,CAAC,CADZ,EACe,IAAI,CAAC,CADpB,EACuB,CADvB,CAEE,CAAC,SAFH,CAAA;QAGA,IAAC,CAAA,KAAD,GAAS,SAZX;;IADI;;IAgBN,OAAS,CAAC,KAAD,EAAQ,IAAR,CAAA;AACP,UAAA;sEAAgC,CAAA,IAAC,CAAA,CAAD,GAAK,IAAI,CAAC,CAAV,WAAhC,KAAkD;IAD3C;;IAGT,MAAQ,CAAA,CAAA;MACN,IAAC,CAAA,QAAD,IAAa;MACb,IAAG,IAAC,CAAA,QAAD,GAAY,CAAf;QACE,IAAC,CAAA,IAAI,CAAC,iBAAN,CAAwB,IAAC,CAAA,UAAzB,EAAqC,CAAC,CAAA,GAAI,IAAC,CAAA,QAAN,CAAA,GAAkB,GAAvD;QACA,IAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,WAAf,CAA2B,IAAC,CAAA,IAA5B,EAAkC,IAAC,CAAA,EAAnC,EAAuC,IAAC,CAAA,QAAxC,EAFF;OAAA,MAAA;QAIE,IAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,IAAf,CAAoB,IAAC,CAAA,EAArB;QACA,IAAC,CAAA,KAAD,GAAS,OALX;;aAMA,IAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,CAAf,GAAmB,IAAC,CAAA,IAAI,CAAC,QAAQ,CAAC,CAAf,GAAmB,IAAC,CAAA,IAAI,CAAC,QAAQ,CAAC;IAR/C;;EA1DV;;EAoEM,mBAAN,MAAA,iBAAA;IACE,WAAa,QAAA,SAAA,CAAA;MAAC,IAAC,CAAA;MAAQ,IAAC,CAAA;MACtB,IAAC,CAAA,KAAD,GAAS;MACT,IAAC,CAAA,MAAD,GAAU,IAAI,KAAK,CAAC,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,GAAxB;MACV,IAAC,CAAA,IAAD,GAAQ,IAAI,KAAK,CAAC;MAClB,IAAC,CAAA,EAAD,GAAM,IAAI,KAAK,CAAC;MAChB,IAAC,CAAA,QAAD,GAAY;IALD;;IAOb,IAAM,CAAC,KAAD,EAAQ,IAAR,CAAA;MACJ,IAAC,CAAA,KAAD,GAAS;MACT,IAAC,CAAA,IAAI,CAAC,IAAN,CAAW,IAAC,CAAA,MAAZ;MACA,IAAC,CAAA,QAAD,GAAY;MACZ,KAAK,CAAC,KAAK,CAAC,IAAZ,GAAmB;AACnB,cAAO,IAAP;AAAA,aACO,MADP;UACmB,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,CAAR,EAAW,CAAX,EAAc,GAAd;AAAZ;AADP,aAEO,KAFP;UAEkB,IAAC,CAAA,EAAE,CAAC,GAAJ,CAAQ,GAAR,EAAa,CAAC,GAAd,EAAmB,GAAnB;AAFlB;IALI;;IAUN,QAAU,CAAA,CAAA;MACR,IAAC,CAAA,MAAM,CAAC,QAAQ,CAAC,UAAjB,CAA4B,IAAC,CAAA,MAAM,CAAC,IAAI,CAAC,QAAzC,EAAmD,IAAC,CAAA,MAApD;aACA,IAAC,CAAA,MAAM,CAAC,MAAR,CAAe,IAAC,CAAA,MAAM,CAAC,IAAI,CAAC,QAA5B;IAFQ;;IAIV,OAAS,CAAA,CAAA;MACP,IAAC,CAAA,QAAD,IAAa;MACb,IAAG,IAAC,CAAA,QAAD,GAAY,CAAf;QACE,IAAC,CAAA,MAAM,CAAC,WAAR,CAAoB,IAAC,CAAA,IAArB,EAA2B,IAAC,CAAA,EAA5B,EAAgC,IAAC,CAAA,QAAjC,EADF;OAAA,MAAA;QAGE,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,IAAC,CAAA,EAAd;QACA,IAAC,CAAA,KAAD,GAAS,WAJX;;aAKA,IAAC,CAAA,QAAD,CAAA;IAPO;;IAST,MAAQ,CAAC,KAAD,CAAA;AACN,UAAA;8DAAA,YAAc;IADR;;EA/BV;;EAkCA,SAAA,GACE;IAAA,GAAA,EAAK,IAAL;IACA,GAAA,EAAK;EADL,EApNF;;;EAyNA,YAAA,GAAe,QAAA,CAAC,IAAD,EAAO,CAAP,EAAU,CAAV,CAAA;AACb,QAAA,MAAA,EAAA;IAAA,KAAA,GAAQ,SAAU,CAAA,IAAA;IAClB,IAAA,CAAc,KAAd;AAAA,aAAA;;IACA,MAAA,GAAS,IAAI,KAAJ,CAAU,CAAV,EAAa,CAAb;;MACT,MAAM,CAAC;;WACP;EALa;;EAOf,KAAA,GAAQ,QAAA,CAAC,KAAD,CAAA;AACN,QAAA,QAAA,EAAA,MAAA,EAAA;IAAA,QAAA,GAAW;IAEX,MAAA,GAAS;IACT,KAAA,GAAQ,KACN,CAAC,IADK,CACA,IADA,CAEN,CAAC,IAFK,CAAA,CAGN,CAAC,KAHK,CAGC,IAHD,CAIN,CAAC,GAJK,CAID,QAAA,CAAC,GAAD,CAAA;aAAS,GAAG,CAAC,IAAJ,CAAA,CAAU,CAAC,KAAX,CAAiB,EAAjB;IAAT,CAJC,CAKN,CAAC,GALK,CAKD,QAAA,CAAC,GAAD,EAAM,CAAN,CAAA;aACH,GAAG,CAAC,GAAJ,CAAQ,QAAA,CAAC,IAAD,EAAO,CAAP,CAAA;AACN,YAAA;QAAA,CAAA,GAAI,YAAA,CAAa,IAAb,EAAmB,CAAnB,EAAsB,CAAtB;QACJ,IAAG,CAAH;UACE,QAAQ,CAAC,IAAT,CAAc,CAAd;UACA,IAAc,CAAC,CAAC,IAAF,KAAU,QAAxB;YAAA,MAAA,GAAS,EAAT;;UACA,CAAC,CAAC,CAAF,GAAM;iBACN,CAAC,CAAC,CAAF,GAAM,EAJR;SAAA,MAAA;iBAME,KANF;;MAFM,CAAR;IADG,CALC;WAgBR;MAAA,IAAA,EAAM,MAAN;MACA,KAAA,EAAO,KAAM,CAAA,CAAA,CAAE,CAAC,MADhB;MAEA,MAAA,EAAQ,KAAK,CAAC,MAFd;MAGA,QAAA,EAAU,QAHV;MAIA,KAAA,EAAO,KAJP;MAKA,MAAA,EAAQ,MALR;MAMA,MAAA,EAAQ,WAAA,CAAY,KAAZ,EAAmB,QAAnB;IANR;EApBM;;EA4BR,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,QAAR,CAAA;AACZ,QAAA,KAAA,EAAA,CAAA,EAAA,WAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA,EAAA;IAAA,QAAA,GAAW,SAAS,CAAC,QAAQ,CAAC;IAC9B,MAAA,GAAS,SAAS,CAAC,QAAQ,CAAC;IAC5B,KAAA,GAAQ,SAAS,CAAC,QAAQ,CAAC;IAC3B,SAAA,GAAY,IAAI,KAAK,CAAC;IACtB,WAAA,GAAc,IAAI,KAAK,CAAC;IAExB,KAAA,+CAAA;;MACE,KAAA,+CAAA;;QACE,KAAA,GAAQ,IAAI,KAAK,CAAC,IAAV,CAAe,QAAf,EAA4B,IAAA,KAAQ,GAAX,GAAoB,KAApB,GAA+B,MAAxD;QACR,KAAK,CAAC,QAAQ,CAAC,CAAf,GAAmB;QACnB,KAAK,CAAC,QAAQ,CAAC,CAAf,GAAmB,CAAC;QACpB,KAAK,CAAC,QAAQ,CAAC,CAAf,GAAmB,CAAC,CAAC,CAAA,GAAI,CAAL;QACpB,SAAS,CAAC,GAAV,CAAc,KAAd;MALF;IADF;IAQA,KAAA,4CAAA;;MACE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAhB,GAAoB,CAAC,CAAC;MACtB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAhB,GAAoB,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAhB,GAAoB,CAAC,CAAC,CAAC,CAAC,CAAF,GAAM,CAAC,CAAC,CAAT;MACrB,CAAC,CAAC,IAAI,CAAC,IAAP,GAAc,CAAC,CAAC;MAChB,WAAW,CAAC,GAAZ,CAAgB,CAAC,CAAC,IAAlB;IALF;WAOA,CAAC,SAAD,EAAY,WAAZ;EAtBY;;EAwBd,IAAA,GAAO,QAAA,CAAC,KAAD,CAAA;AACL,QAAA,MAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA;IAAA,KAAA,GAAQ,MAAM,CAAC;IACf,MAAA,GAAS,MAAM,CAAC;IAChB,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,KAAf,EAAsB,KAAK,CAAC,MAA5B,CAAA,GAAsC,CAAlD;IACP,IAAG,KAAA,GAAQ,MAAX;MACE,KAAA,GAAQ,KAAA,GAAQ;MAChB,MAAA,GAAS;MACT,KAAA,GAAQ,IAAA,GAAO,MAHjB;KAAA,MAAA;MAKE,KAAA,GAAQ,MAAA,GAAS;MACjB,KAAA,GAAQ;MACR,MAAA,GAAS,IAAA,GAAO,MAPlB;;IASA,MAAA,GAAS,IAAI,KAAK,CAAC,kBAAV,CAA6B,CAAC,KAA9B,EAAqC,KAArC,EAA4C,MAA5C,EAAoD,CAAC,MAArD,EAA6D,IAA7D,EAAmE,IAAnE;IACT,MAAM,CAAC,QAAQ,CAAC,CAAhB,GAAoB;IACpB,MAAM,CAAC,QAAQ,CAAC,CAAhB,GAAoB,KAAK,CAAC,KAAN,GAAc;IAClC,MAAM,CAAC,QAAQ,CAAC,CAAhB,GAAoB,CAAC,KAAK,CAAC,MAAP,GAAgB;IACpC,gBAAA,GAAmB,IAAI,gBAAJ,CAAqB,MAArB,EAA6B,KAAK,CAAC,MAAnC;IACnB,KAAK,CAAC,QAAQ,CAAC,IAAf,CAAoB,gBAApB;IAEA,QAAA,GAAW,IAAI,KAAK,CAAC,aAAV,CAAwB;MAAA,SAAA,EAAW;IAAX,CAAxB;IACX,QAAQ,CAAC,OAAT,CAAiB,MAAM,CAAC,UAAxB,EAAoC,MAAM,CAAC,WAA3C;IACA,QAAQ,CAAC,SAAT,GAAqB;IACrB,QAAQ,CAAC,IAAI,CAAC,WAAd,CAA0B,QAAQ,CAAC,UAAnC;IAEA,MAAM,CAAC,KAAP,GAAe,SAAS,CAAC,QAAQ,CAAC;WAClC,MAAM,CAAC,KAAP,GAAe,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,EAA0B,SAA1B,EAAqC,gBAArC;EA1BV;;EA4BP,OAAA,GAAU,QAAA,CAAC,KAAD,CAAA;AACR,QAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA;IAAA,qBAAA,CAAsB,QAAA,CAAA,CAAA;aAAG,OAAA,CAAQ,KAAR;IAAH,CAAtB;IAEA,KAAK,CAAC,QAAQ,CAAC,KAAf,CAAA;AACA;IAAA,KAAA,6CAAA;;MACE,IAA+B,CAA/B;QAAA,KAAK,CAAC,QAAQ,CAAC,UAAf,CAAA,EAAA;;MACA,KAAK,CAAC,QAAQ,CAAC,MAAf,CAAsB,KAAtB,EAA6B,KAAK,CAAC,MAAnC;IAFF;AAIA;AAAA;IAAA,KAAA,wCAAA;;sDACE,GAAG,CAAC,OAAQ;IADd,CAAA;;EARQ;AAhTV",
  "sourcesContent": [
    "tmp = new THREE.Vector3\n\nvalidMoves =\n  orto:\n    w: new THREE.Vector3 0, -1, 0\n    d: new THREE.Vector3 1, 0, 0\n    s: new THREE.Vector3 0, 1, 0\n    a: new THREE.Vector3 -1, 0, 0\n  hex:\n    w: new THREE.Vector3 0, -1, 0\n    e: new THREE.Vector3 1, -1, 0\n    d: new THREE.Vector3 1, 0, 0\n    x: new THREE.Vector3 0, 1, 0\n    z: new THREE.Vector3 -1, 1, 0\n    a: new THREE.Vector3 -1, 0, 0\n\nloadCounter = 0\nresources =\n  geometry:\n    block: do ->\n      block = new THREE.BoxGeometry 1, 1, 1\n\n      block.faceVertexUvs[0][0][0].x = 1\n      block.faceVertexUvs[0][0][1].x = 1\n      block.faceVertexUvs[0][0][2].x = 0\n      block.faceVertexUvs[0][1][0].x = 1\n      block.faceVertexUvs[0][1][1].x = 0\n      block.faceVertexUvs[0][1][2].x = 0\n\n      block.faceVertexUvs[0][6][0].y = 0\n      block.faceVertexUvs[0][6][1].y = 1\n      block.faceVertexUvs[0][6][2].y = 0\n      block.faceVertexUvs[0][7][0].y = 1\n      block.faceVertexUvs[0][7][1].y = 1\n      block.faceVertexUvs[0][7][2].y = 0\n\n      block.uvsNeedUpdate = true\n      block\n    hex_pad: new THREE.CircleGeometry 0.5, 6\n  material:\n    bird_arms: new THREE.MeshBasicMaterial color: 0xffff00\n    bird_beak: new THREE.MeshBasicMaterial color: 0xffaa00\n    frog_rim: new THREE.MeshBasicMaterial color: 0x84c914\n    hex_pad: new THREE.MeshBasicMaterial\n      color: 0x66ddff\n      transparent: true\n      opacity: 0.7\n\nloaders =\n  geometry: new THREE.JSONLoader\n  material: new THREE.TextureLoader\n\nload = (type, path, transforms) ->\n  ++loadCounter\n  loaders[type].load 'assets/models/' + path, (obj) ->\n    name = path\n      .split '/'\n      .pop()\n      .split '.'\n      .shift()\n    if type is 'material'\n      obj = new THREE.MeshBasicMaterial map: obj\n    for [transform, args] in (transforms or [])\n      obj[transform] ...args\n    resources[type][name] = obj\n    loaded()\n\nSCALE = 0.24\nload 'geometry', 'bird/bird.json', [\n  ['translate', [0, -5, 0]],\n  ['scale', [SCALE, SCALE, SCALE]],\n]\nload 'material', 'bird/bird_face.png'\nload 'material', 'bird/frog_eye.png'\nload 'material', 'bird/frog_face.png'\nload 'material', 'block.png'\nload 'material', 'block2.png'\nload 'material', 'block-debug.png'\n\nloaded = ->\n  return if --loadCounter\n  level1 = level\"\n    ########\\n\n    #...#.!#\\n\n    #.@..###\\n\n    #......#\\n\n    #....H.#\\n\n    #......#\\n\n    ########\\n\n  \"\n  requestAnimationFrame -> animate init level1\n\nclass HexPad\n  constructor: (@x, @y) ->\n    @type = 'hex-pad'\n    @geometry = resources.geometry.hex_pad\n    @material = resources.material.hex_pad\n    @mesh = new THREE.Mesh @geometry, @material\n    @rollVector = new THREE.Vector3 1, 0.5, 2\n      .normalize()\n\n  update: (state) ->\n    @mesh.rotateOnWorldAxis @rollVector, 0.05\n    if state.level.mode isnt 'hex' and\n      state.level.player.x is @x and\n      state.level.player.y is @y\n        state.cameraController.warp state, 'hex'\n    return\n\nclass Bird\n  constructor: (@x, @y)->\n    @type = 'player'\n    @geometry = resources.geometry.bird\n    @material = [\n      resources.material.bird_arms,\n      resources.material.bird_face,\n      resources.material.frog_rim,\n      resources.material.frog_face,\n      resources.material.bird_beak,\n      resources.material.frog_eye,\n    ]\n    @mesh = new THREE.Mesh @geometry, @material\n    @state = 'idle'\n    @nextMove = null\n    @from = new THREE.Vector3\n    @to = new THREE.Vector3\n    @progress = 0\n    @rollVector = new THREE.Vector3\n\n  init: ->\n    @onKeyDown = (event) =>\n      switch event.key.toLowerCase()\n        when 'a' then @nextMove = 'a'\n        when 'd' then @nextMove = 'd'\n        when 's' then @nextMove = 's'\n        when 'w' then @nextMove = 'w'\n        when 'e' then @nextMove = 'e'\n        when 'x' then @nextMove = 'x'\n        when 'z' then @nextMove = 'z'\n      return\n    document.addEventListener 'keydown', @onKeyDown\n\n  deinit: ->\n    document.removeEventListener 'keydown', @onKeyDown\n\n  update: (state) ->\n    this[@state]? state\n\n  idle: (state) ->\n    if @nextMove\n      move = validMoves[state.level.mode][@nextMove]\n      @nextMove = null\n      return unless move and @canMove state, move\n      @from.set @x, -@y, 0\n      @x += move.x\n      @y += move.y\n      @to.set @x, -@y, 0\n      @progress = 0\n      @rollVector\n        .set move.y, move.x, 0\n        .normalize()\n      @state = 'moving'\n    return\n\n  canMove: (state, move) ->\n    state.level.tiles[@y + move.y]?[@x + move.x] isnt \"#\"\n\n  moving: ->\n    @progress += 0.12\n    if @progress < 1\n      @mesh.rotateOnWorldAxis @rollVector, (1 - @progress) * 0.3\n      @mesh.position.lerpVectors @from, @to, @progress\n    else\n      @mesh.position.copy @to\n      @state = 'idle'\n    @mesh.position.z = @mesh.position.y - @mesh.position.x\n\nclass CameraController\n  constructor: (@camera, @player) ->\n    @state = 'tracking'\n    @offset = new THREE.Vector3 0, 0, 512\n    @from = new THREE.Vector3\n    @to = new THREE.Vector3\n    @progress = 0\n\n  warp: (state, mode) ->\n    @state = 'warping'\n    @from.copy @offset\n    @progress = 0\n    state.level.mode = mode\n    switch mode\n      when 'orto' then @to.set 0, 0, 512\n      when 'hex' then @to.set 512, -512, 512\n    return\n\n  tracking: ->\n    @camera.position.addVectors @player.mesh.position, @offset\n    @camera.lookAt @player.mesh.position\n\n  warping: ->\n    @progress += 0.06\n    if @progress < 1\n      @offset.lerpVectors @from, @to, @progress\n    else\n      @offset.copy @to\n      @state = 'tracking'\n    @tracking()\n\n  update: (state) ->\n    this[@state]? state\n\nentityMap =\n  '@': Bird\n  'H': HexPad\n\n#  '!': type: 'goal'\n\ncreateEntity = (char, x, y) ->\n  klass = entityMap[char]\n  return unless klass\n  entity = new klass x, y\n  entity.init?()\n  entity\n\nlevel = (parts) ->\n  entities = []\n\n  player = null\n  tiles = parts\n    .join \"\\n\"\n    .trim()\n    .split \"\\n\"\n    .map (str) -> str.trim().split \"\"\n    .map (row, j) ->\n      row.map (char, i) ->\n        e = createEntity char, i, j\n        if e\n          entities.push e\n          player = e if e.type is 'player'\n          e.x = i\n          e.y = j\n        else\n          char\n\n  mode: 'orto'\n  width: tiles[0].length\n  height: tiles.length\n  entities: entities\n  tiles: tiles\n  player: player\n  scenes: createScene tiles, entities\n\ncreateScene = (tiles, entities) ->\n  geometry = resources.geometry.block\n  ground = resources.material.block\n  solid = resources.material.block2\n  tileScene = new THREE.Scene\n  entityScene = new THREE.Scene\n\n  for row, j in tiles\n    for tile, i in row\n      block = new THREE.Mesh geometry, if tile is '#' then solid else ground\n      block.position.x = i\n      block.position.y = -j\n      block.position.z = -(i + j)\n      tileScene.add block\n\n  for e in entities\n    e.mesh.position.x = e.x\n    e.mesh.position.y = -e.y\n    e.mesh.position.z = -(e.x + e.y)\n    e.mesh.name = e.type\n    entityScene.add e.mesh\n\n  [tileScene, entityScene]\n\ninit = (level) ->\n  width = window.innerWidth\n  height = window.innerHeight\n  size = Math.max 6, Math.max(level.width, level.height) / 2\n  if width > height\n    ratio = width / height\n    height = size\n    width = size * ratio\n  else\n    ratio = height / width\n    width = size\n    height = size * ratio\n\n  camera = new THREE.OrthographicCamera -width, width, height, -height, 0.01, 2048\n  camera.position.z = 1024\n  camera.position.x = level.width / 2\n  camera.position.y = -level.height / 2\n  cameraController = new CameraController camera, level.player\n  level.entities.push cameraController\n\n  renderer = new THREE.WebGLRenderer antialias: true\n  renderer.setSize window.innerWidth, window.innerHeight\n  renderer.autoClear = false\n  document.body.appendChild renderer.domElement\n\n  window.block = resources.geometry.block\n  window.state = {level, renderer, camera, resources, cameraController}\n\nanimate = (state) ->\n  requestAnimationFrame -> animate state\n\n  state.renderer.clear()\n  for scene, i in state.level.scenes\n    state.renderer.clearDepth() if i\n    state.renderer.render scene, state.camera\n\n  for ent in state.level.entities\n    ent.update? state\n\n"
  ]
}